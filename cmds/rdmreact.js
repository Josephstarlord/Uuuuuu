module.exports = {
    name: "rdmreact",
    usePrefix: true,
    usage: "r√©agit √† tous les messages avec un emoji similaire ou al√©atoire",
    version: "1.4",
    author: "aesther", 
    description: "R√©agit automatiquement aux messages avec des emojis",

    onStart: async function({ api, event }) {
        // Cette fonction est n√©cessaire pour que la commande soit reconnue par le syst√®me
    },

    onChat: async function({ api, event }) {
        if (!event.body || !event.messageID) return;

        // Liste d'emojis al√©atoires am√©lior√©e
        const randomEmojis = [
            'üòò', 'ü•∫', 'üòÄ', 'üòæ', 'üòõ', 'üòΩ', 'üò∏', '‚ô•Ô∏è', 'üòã', '‚ú®', 
            '‚ùÑÔ∏è', 'üëÖ', 'üòí', 'üòä', 'üíö', 'üöÄ', 'ü§™', 'üòô', 'ü•¥', 'ü§ê', 
            'üôÅ', 'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 
            'üôÉ', 'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', '‚ò∫Ô∏è', 
            'üòö', 'üòô', 'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù', 'ü§ë', 'ü§ó', 'ü§≠', 
            'ü§´', 'ü§î', 'ü§ê', 'ü§®', 'üòê', 'üòë', 'ü§π', 'üé≠', 'ü©∞', 'üé®', 
            'üé¨', 'üé§', 'üéß', 'üéº', 'üéπ', 'ü•Å', 'ü™ò', 'üé∑', 'üé∫', 'üé∏', 
            'ü™ï', 'üéª', 'üé≤', '‚ôüÔ∏è', 'üéØ', 'üé≥', 'üéÆ', 'üé∞', 'üß©', 'üß∏', 
            'ü™Ö', 'ü™Ü', '‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è', 'üÉè', 'üÄÑ', 'üé¥', 'üé≠', 
            'üñºÔ∏è', 'üé®', 'üßµ', 'üß∂', 'ü™°', 'ü™¢', 'üëì', 'üï∂Ô∏è', 'ü•Ω', 'ü•º', 
            'ü¶∫', 'üëî', 'üëï', 'üëñ', 'üß£', 'üß§', 'üß•', 'üß¶', 'üëó', 'üëò', 
            'ü•ª', 'ü©±', 'ü©≤', 'ü©≥', 'üëô', 'üëö', 'üëõ', 'üëú', 'üëù', 'üõçÔ∏è', 
            'üéí', 'üëû', 'üëü', 'ü•æ', 'ü•ø', 'üë†', 'üë°', 'ü©∞', 'üë¢', 'üëë', 
            'üëí', 'üé©', 'üéì', 'üß¢', 'ü™ñ', '‚õëÔ∏è', 'üíÑ', 'üíç', 'üíº', 'ü©¥'
        ];

        // Regex am√©lior√©e pour d√©tecter les emojis
        const emojiRegex = /[\u{1F300}-\u{1F5FF}\u{1F600}-\u{1F64F}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu;
        const existingEmojis = event.body.match(emojiRegex);

        let selectedEmoji;
        
        // Si le message contient des emojis, on en s√©lectionne un au hasard
        if (existingEmojis && existingEmojis.length > 0) {
            selectedEmoji = existingEmojis[Math.floor(Math.random() * existingEmojis.length)];
        } else {
            // Sinon, on prend un emoji al√©atoire dans notre liste
            selectedEmoji = randomEmojis[Math.floor(Math.random() * randomEmojis.length)];
        }

        // Envoi de la r√©action avec gestion d'erreur
        try {
            await api.setMessageReaction(selectedEmoji, event.messageID, (err) => {
                if (err) {
                    console.error("Erreur lors de l'ajout de la r√©action:", err);
                    // Tentative avec un emoji de secours si la premi√®re √©choue
                    const fallbackEmoji = '‚ù§Ô∏è';
                    api.setMessageReaction(fallbackEmoji, event.messageID, () => {}, true);
                }
            }, true);
        } catch (error) {
            console.error("Erreur fatale de r√©action:", error);
        }
    }
};
