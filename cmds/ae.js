const axios = require("axios");

const fonts = {
    a: "ùñ∫", b: "ùñª", c: "ùñº", d: "ùñΩ", e: "ùñæ", f: "ùñø", g: "ùóÄ", h: "ùóÅ", i: "ùóÇ",
    j: "ùóÉ", k: "ùóÑ", l: "ùóÖ", m: "ùóÜ", n: "ùóá", o: "ùóà", p: "ùóâ", q: "ùóä", r: "ùóã",
    s: "ùóå", t: "ùóç", u: "ùóé", v: "ùóè", w: "ùóê", x: "ùóë", y: "ùóí", z: "ùóì",
    A: "ùóî", B: "ùóï", C: "ùóñ", D: "ùóó", E: "ùóò", F: "ùóô", G: "ùóö", H: "ùóõ", I: "ùóú",
    J: "ùóù", K: "ùóû", L: "ùóü", M: "ùó†", N: "ùó°", O: "ùó¢", P: "ùó£", Q: "ùó§", R: "ùó•",
    S: "ùó¶", T: "ùóß", U: "ùó®", V: "ùó©", W: "ùó™", X: "ùó´", Y: "ùó¨", Z: "ùó≠"
};

const stickers = [
  "254594546003916", "254595732670464", "254593389337365",
  "37117808696806", "254597316003639", "254598806003490",
  "254596219337082", "2379537642070973", "2379545095403561",
  "2379551785402892", "254597059336998"
];

const RP = "R√©pond et ajoute des Emoji convenables";

function applyFont(text) {
    return text.split('').map(char => fonts[char] || char).join('');
}

module.exports = {
    name: "ai",
    usePrefix: false,
    usage: "ai <question>",
    version: "1.3",
    author:"Aesther", 
    admin: false,
    cooldown: 2,

    execute: async ({ api, event, args }) => {
        const { threadID } = event;
        const prompt = args.join(" ");
        
        if (!prompt) {
            const randomSticker = stickers[Math.floor(Math.random() * stickers.length)];
            await api.sendMessage({ sticker: randomSticker }, threadID);
            return;
        }
        
        const loadingMsg = await api.sendMessage(applyFont(""), threadID);
            
        try {
            const apiUrl = `https://vapis.my.id/api/openai?q=${encodeURIComponent(RP + " : " + prompt)}`;
            
            const { data } = await axios.get(apiUrl);
            const response = data?.result || data?.description || data?.reponse || data;
            
            if (response) {
                await api.unsendMessage(loadingMsg.messageID);
                const styledResponse = applyFont(response.toString());
                await api.sendMessage(`${styledResponse} ü™ê`, threadID);
                api.setMessageReaction("ü™ê", event.messageID, () => {}, true);
                return;
            }
            
            await api.sendMessage(applyFont("‚ö†Ô∏è L'API n'a pas retourn√© de r√©ponse valide."), threadID);
        } catch (error) {
            console.error("Erreur Gemini:", error);
            await api.sendMessage(applyFont("‚ùå Erreur de connexion avec l'API Gemini."), threadID);
        }
    }
};
